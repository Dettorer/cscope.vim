*cscove.txt*            cscove, a smart cscope helper for vim.          *cscove*

1. About cscove                                    |cscove-about|
2. Quick Start                                     |cscove-quickstart|
4. Interactive Mode                                |cscove-interactive|
5. Key Mappings                                    |cscove-keymappings|
6. Options                                         |cscove-options|

=============================================================================
1. ABOUT cscove ~
                                                               *cscove-about*

Cscove is a smart cscope helper for vim.

It will try to find a proper cscope database for current file, then connect to
it. If there is no proper cscope database for current file, you are prompted to
specify a folder with a string like --

    Can not find proper cscope db, please input a path to create cscope db for.

Then the plugin will create cscope database for you, connect to it, and find
what you want. The found result will be listed in a location list window. Next
time when you open the same file or other file that the cscope database can be
used for, the plugin will connect to the cscope database automatically. You
need not take care of anything about cscope database.

When you have a file edited in those folders for which cscope databases have
been created, cscove will automatically update the corresponding database.

                                                               *CscopeList*

List all existing cscope databases that cscove has created for you.

    :CscopeList

Here is example output from |:CscopeList|

     ID                   COUNT    PATH
    *1337668712           3        /works/vim/src

    '*'         means the db has been connected.
    ID          id of the db.
    COUNT       how many times this db has ever been used.
    PATH        which folder the db is for.
                                                               *CscopeClear*

Remove all existing cscope databases that cscove has created for you.

    :CscopeClear


                                                               *cscope-options*

Preload path settings help you to load some common libraries by default. For example,

    let g:cscope_preload_path="/usr/include/c++/;/works/phplib/trunk/php"

                                                               *cscope-keymappings*
Below is the recommended key mappings.

    nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>

    " s: Find this C symbol
    nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
    " g: Find this definition
    nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
    " d: Find functions called by this function
    nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
    " c: Find functions calling this function
    nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
    " t: Find this text string
    nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
    " e: Find this egrep pattern
    nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
    " f: Find this file
    nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
    " i: Find files #including this file
    nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>
    nnoremap  <leader>l :call ToggleLocationList()<CR>

                                                               *cscope-interactive*

cscope can search your target by different type, see |cscope-find|.  If you would
not like to create different keymappings for different {querytype}. Use
|cscope#findInteractive|.

    nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>

" vim: set expandtab sts=2 ts=2 sw=2 tw=78 ft=help norl:
